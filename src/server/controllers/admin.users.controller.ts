import { db } from "../db.config";
import bcrypt from "bcryptjs";

// ‚úÖ list ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å name ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢)
export async function adminListUsers() {
  const rows = await db.any(`
    SELECT u.id, u.username, u.name, u.role_code,
           u.department_id, d.code AS department_code, d.name AS department_name,
           u.created_at
    FROM users u
    LEFT JOIN departments d ON d.id = u.department_id
    ORDER BY u.id DESC
  `);
  return rows;
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö name; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô)
export async function adminCreateUser(body: any) {
  const username = String(body?.username || "").trim();
  const name     = String(body?.name || "").trim();
  const role_code = String(body?.role_code || "").trim().toLowerCase();
  const department_id = body?.department_id ? Number(body.department_id) : null;
  const password = String(body?.password || "");

  if (!username || !password || !role_code) return { error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥ username
  const dup = await db.oneOrNone("SELECT id FROM users WHERE username = $1", [username]);
  if (dup) return { error: "‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" };

  const hash = await bcrypt.hash(password, 10);
  const displayName = name || username; // üëà ‡∏Å‡∏±‡∏ô null ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå name

  const row = await db.one(
    `INSERT INTO users (username, name, password_hash, role_code, department_id)
     VALUES ($1,$2,$3,$4,$5)
     RETURNING id, username, name, role_code, department_id`,
    [username, displayName, hash, role_code, department_id]
  );
  return { message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: row };
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï name/role/department ‡πÑ‡∏î‡πâ)
export async function adminUpdateUser(idParam: string, body: any) {
  const id = Number(idParam);
  if (!id) return { error: "id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };

  const name = typeof body?.name === "string" ? String(body.name).trim() : undefined;
  const role_code = body?.role_code ? String(body.role_code).toLowerCase() : undefined;
  const department_id =
    typeof body?.department_id === "number" ? body.department_id : body?.department_id === null ? null : undefined;

  const sets: string[] = [];
  const vals: any[] = [];
  let i = 1;

  if (name !== undefined)         { sets.push(`name = $${i++}`); vals.push(name); }
  if (role_code !== undefined)    { sets.push(`role_code = $${i++}`); vals.push(role_code); }
  if (department_id !== undefined){ sets.push(`department_id = $${i++}`); vals.push(department_id); }

  if (!sets.length) return { error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" };

  vals.push(id);
  const row = await db.oneOrNone(
    `UPDATE users SET ${sets.join(", ")} WHERE id = $${i}
     RETURNING id, username, name, role_code, department_id`,
    vals
  );
  if (!row) return { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" };
  return { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: row };
}

// ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
export async function adminResetPassword(idParam: string, body: any) {
  const id = Number(idParam);
  if (!id) return { error: "id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
  const password = String(body?.password || "");
  if (!password) return { error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" };
  const hash = await bcrypt.hash(password, 10);
  await db.none(`UPDATE users SET password_hash = $1 WHERE id = $2`, [hash, id]);
  return { message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" };
}

// ‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export async function adminDeleteUser(idParam: string) {
  const id = Number(idParam);
  if (!id) return { error: "id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
  await db.none("DELETE FROM users WHERE id = $1", [id]);
  return { message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" };
}
